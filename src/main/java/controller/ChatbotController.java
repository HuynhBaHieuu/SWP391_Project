package controller;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import dao.DBConnection;

@WebServlet("/chatbot-api")
public class ChatbotController extends HttpServlet {
    
    private Gson gson = new Gson();
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Set encoding for request and response
        request.setCharacterEncoding("UTF-8");
        response.setContentType("application/json; charset=UTF-8");
        response.setCharacterEncoding("UTF-8");
        
        PrintWriter out = response.getWriter();
        
        try {
            // Parse JSON request
            JsonObject requestData = gson.fromJson(request.getReader(), JsonObject.class);
            String userMessage = requestData.get("message").getAsString();
            
            System.out.println("=== CHATBOT REQUEST ===");
            System.out.println("User message: " + userMessage);
            
            // Test database connection first
            String testResult = testDatabaseConnection();
            System.out.println("Database test result: " + testResult);
            
            // Process the message and get response
            String botResponse = processUserMessage(userMessage);
            
            // Create response JSON
            JsonObject responseJson = new JsonObject();
            responseJson.addProperty("response", botResponse);
            responseJson.addProperty("success", true);
            responseJson.addProperty("debug", testResult);
            
            out.print(gson.toJson(responseJson));
            
        } catch (Exception e) {
            System.err.println("=== CHATBOT ERROR ===");
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
            
            // Handle errors
            JsonObject errorJson = new JsonObject();
            errorJson.addProperty("error", "L·ªói x·ª≠ l√Ω: " + e.getMessage());
            errorJson.addProperty("success", false);
            
            out.print(gson.toJson(errorJson));
        } finally {
            out.close();
        }
    }
    
    private String testDatabaseConnection() {
        try (Connection conn = DBConnection.getConnection()) {
            System.out.println("Database connection successful");
            
            // Test simple query
            String sql = "SELECT COUNT(*) as total FROM listings";
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                
                if (rs.next()) {
                    int total = rs.getInt("total");
                    System.out.println("Total listings: " + total);
                    return "Database OK - Total listings: " + total;
                }
            }
            
            return "Database OK - No data found";
            
        } catch (SQLException e) {
            System.err.println("Database connection failed: " + e.getMessage());
            return "Database ERROR: " + e.getMessage();
        } catch (Exception e) {
            System.err.println("General error: " + e.getMessage());
            return "General ERROR: " + e.getMessage();
        }
    }
    
    private String processUserMessage(String userMessage) {
        String lowerMessage = userMessage.toLowerCase();
        
        System.out.println("=== PROCESSING MESSAGE ===");
        System.out.println("Original message: " + userMessage);
        System.out.println("Lowercase message: " + lowerMessage);
        
        // Test database command - highest priority
        if (lowerMessage.contains("test") || lowerMessage.contains("ki·ªÉm tra")) {
            System.out.println("‚Üí Routing to: testDatabaseQuery");
            return testDatabaseQuery();
        }
        
        // Simple test command
        if (lowerMessage.contains("simple") || lowerMessage.contains("ƒë∆°n gi·∫£n")) {
            System.out.println("‚Üí Routing to: getSimpleTest");
            return getSimpleTest();
        }
        
        // Check for specific query types with more precise matching
        if (lowerMessage.contains("gi√°") || lowerMessage.contains("price") || lowerMessage.contains("cost") || 
            lowerMessage.contains("gi√° ph√≤ng") || lowerMessage.contains("price room") ||
            lowerMessage.contains("so s√°nh gi√°") || lowerMessage.contains("ph√≤ng gi√° bao nhi√™u")) {
            System.out.println("‚Üí Routing to: getPriceInformation");
            return getPriceInformation(userMessage);
        } else if (lowerMessage.contains("ƒë·ªãa ƒëi·ªÉm") || lowerMessage.contains("location") || lowerMessage.contains("where") ||
                   lowerMessage.contains("ph√≤ng ·ªü ƒë√¢u") || lowerMessage.contains("room where") ||
                   lowerMessage.contains("ƒë·ªãa ƒëi·ªÉm n√†o c√≥ nhi·ªÅu ph√≤ng") || lowerMessage.contains("ph√≤ng ·ªü qu·∫≠n n√†o")) {
            System.out.println("‚Üí Routing to: getLocationInformation");
            return getLocationInformation(userMessage);
        } else if (lowerMessage.contains("ti·ªán √≠ch") || lowerMessage.contains("amenities") || lowerMessage.contains("facilities") ||
                   lowerMessage.contains("ph√≤ng c√≥ ti·ªán √≠ch g√¨") || lowerMessage.contains("ph√≤ng c√≥ wifi") ||
                   lowerMessage.contains("ph√≤ng c√≥ ƒëi·ªÅu h√≤a") || lowerMessage.contains("ti·ªán √≠ch ph√≤ng")) {
            System.out.println("‚Üí Routing to: getAmenitiesInformation");
            return getAmenitiesInformation(userMessage);
        } else if (lowerMessage.contains("ƒë·∫∑t") || lowerMessage.contains("book") || lowerMessage.contains("reserve") ||
                   lowerMessage.contains("l√†m sao ƒë·∫∑t ph√≤ng") || lowerMessage.contains("c√°ch ƒë·∫∑t ph√≤ng") ||
                   lowerMessage.contains("ƒë·∫∑t ph√≤ng nh∆∞ th·∫ø n√†o")) {
            System.out.println("‚Üí Routing to: getBookingInformation");
            return getBookingInformation(userMessage);
        } else if (lowerMessage.contains("ph√≤ng") || lowerMessage.contains("room") || lowerMessage.contains("accommodation") ||
                   lowerMessage.contains("t√¨m ph√≤ng") || lowerMessage.contains("find room") ||
                   lowerMessage.contains("t√¥i mu·ªën t√¨m ph√≤ng") || lowerMessage.contains("t√¨m ph√≤ng gi√° r·∫ª") ||
                   lowerMessage.contains("ph√≤ng g·∫ßn trung t√¢m") || lowerMessage.contains("t√¥i c·∫ßn t∆∞ v·∫•n ph√≤ng")) {
            System.out.println("‚Üí Routing to: getRoomRecommendations");
            return getRoomRecommendations(userMessage);
        } else if (lowerMessage.contains("gi√∫p t√¥i") || lowerMessage.contains("h∆∞·ªõng d·∫´n") || lowerMessage.contains("t√¥i c·∫ßn h·ªó tr·ª£")) {
            System.out.println("‚Üí Routing to: getGeneralRecommendations");
            return getGeneralRecommendations(userMessage);
        } else {
            System.out.println("‚Üí Routing to: getGeneralRecommendations");
            return getGeneralRecommendations(userMessage);
        }
    }
    
    private String getRoomRecommendations(String userMessage) {
        System.out.println("=== DEBUG: getRoomRecommendations called ===");
        System.out.println("User message: " + userMessage);
        
        try (Connection conn = DBConnection.getConnection()) {
            System.out.println("Database connection successful");
            
            // Test with simple query first - use correct column names
            String sql = "SELECT TOP 5 ListingID, Title, Description, PricePerNight, Address " +
                        "FROM listings";
            
            System.out.println("SQL Query: " + sql);
            
            List<Map<String, Object>> rooms = new ArrayList<>();
            
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                
                System.out.println("Query executed successfully");
                
                while (rs.next()) {
                    Map<String, Object> room = new HashMap<>();
                    room.put("id", rs.getInt("ListingID"));
                    room.put("title", rs.getString("Title"));
                    room.put("description", rs.getString("Description"));
                    room.put("price", rs.getDouble("PricePerNight"));
                    room.put("location", rs.getString("Address"));
                    rooms.add(room);
                    System.out.println("Found room: " + room.get("title"));
                }
            }
            
            if (rooms.isEmpty()) {
                System.out.println("No rooms found");
                return "Xin l·ªói, hi·ªán t·∫°i ch√∫ng t√¥i ch∆∞a c√≥ ph√≤ng n√†o kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau!";
            }
            
            StringBuilder response = new StringBuilder();
            response.append("üè† **ƒê·ªÅ xu·∫•t ph√≤ng t·ªët nh·∫•t cho b·∫°n:**\n\n");
            
            for (int i = 0; i < rooms.size(); i++) {
                Map<String, Object> room = rooms.get(i);
                response.append(String.format("**%d. %s**\n", i + 1, room.get("title")));
                response.append(String.format("üìç ƒê·ªãa ƒëi·ªÉm: %s\n", room.get("location")));
                response.append(String.format("üí∞ Gi√°: %.0f VNƒê/ƒë√™m\n", room.get("price")));
                response.append(String.format("üìù M√¥ t·∫£: %s\n\n", room.get("description")));
            }
            
            response.append("üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch·ªß nh√† ƒë·ªÉ ƒë·∫∑t ph√≤ng ho·∫∑c h·ªèi th√™m th√¥ng tin chi ti·∫øt!");
            
            return response.toString();
            
        } catch (SQLException e) {
            System.err.println("=== SQL ERROR ===");
            System.err.println("Error message: " + e.getMessage());
            System.err.println("Error code: " + e.getErrorCode());
            System.err.println("SQL state: " + e.getSQLState());
            e.printStackTrace();
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i sau!";
        } catch (Exception e) {
            System.err.println("=== GENERAL ERROR ===");
            System.err.println("Error message: " + e.getMessage());
            e.printStackTrace();
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }
    
    private String getPriceInformation(String userMessage) {
        System.out.println("=== DEBUG: getPriceInformation called ===");
        System.out.println("User message: " + userMessage);
        
        try (Connection conn = DBConnection.getConnection()) {
            System.out.println("Database connection successful for price info");
            
            String sql = "SELECT MIN(PricePerNight) as min_price, MAX(PricePerNight) as max_price, " +
                        "AVG(PricePerNight) as avg_price, COUNT(*) as total_rooms " +
                        "FROM listings WHERE Status = 'Active'";
            
            System.out.println("SQL Query: " + sql);
            
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                
                System.out.println("Query executed successfully for price info");
                
                if (rs.next()) {
                    double minPrice = rs.getDouble("min_price");
                    double maxPrice = rs.getDouble("max_price");
                    double avgPrice = rs.getDouble("avg_price");
                    int totalRooms = rs.getInt("total_rooms");
                    
                    System.out.println("Price data found - Total rooms: " + totalRooms + 
                                     ", Min: " + minPrice + ", Max: " + maxPrice + ", Avg: " + avgPrice);
                    
                    return String.format("üí∞ **Th√¥ng tin gi√° ph√≤ng:**\n\n" +
                                       "üè† T·ªïng s·ªë ph√≤ng: %d\n" +
                                       "üíµ Gi√° th·∫•p nh·∫•t: %.0f VNƒê/ƒë√™m\n" +
                                       "üíµ Gi√° cao nh·∫•t: %.0f VNƒê/ƒë√™m\n" +
                                       "üíµ Gi√° trung b√¨nh: %.0f VNƒê/ƒë√™m\n\n" +
                                       "üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ l·ªçc ph√≤ng theo gi√° mong mu·ªën ƒë·ªÉ t√¨m ƒë∆∞·ª£c ph√≤ng ph√π h·ª£p nh·∫•t!",
                                       totalRooms, minPrice, maxPrice, avgPrice);
                } else {
                    System.out.println("No price data found in result set");
                }
            }
            
            return "Hi·ªán t·∫°i ch∆∞a c√≥ th√¥ng tin gi√° ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i sau!";
            
        } catch (SQLException e) {
            System.err.println("=== SQL ERROR in getPriceInformation ===");
            System.err.println("Error message: " + e.getMessage());
            System.err.println("Error code: " + e.getErrorCode());
            System.err.println("SQL state: " + e.getSQLState());
            e.printStackTrace();
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin gi√°. Vui l√≤ng th·ª≠ l·∫°i sau!";
        } catch (Exception e) {
            System.err.println("=== GENERAL ERROR in getPriceInformation ===");
            System.err.println("Error message: " + e.getMessage());
            e.printStackTrace();
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin gi√°. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }
    
    private String getLocationInformation(String userMessage) {
        System.out.println("=== DEBUG: getLocationInformation called ===");
        System.out.println("User message: " + userMessage);
        
        try (Connection conn = DBConnection.getConnection()) {
            System.out.println("Database connection successful for location info");
            
            String sql = "SELECT TOP 5 Address, COUNT(*) as room_count " +
                        "FROM listings WHERE Status = 'Active' " +
                        "GROUP BY Address ORDER BY room_count DESC";
            
            System.out.println("SQL Query: " + sql);
            
            List<Map<String, Object>> locations = new ArrayList<>();
            
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                
                System.out.println("Query executed successfully for location info");
                
                while (rs.next()) {
                    Map<String, Object> location = new HashMap<>();
                    location.put("location", rs.getString("Address"));
                    location.put("room_count", rs.getInt("room_count"));
                    locations.add(location);
                    System.out.println("Found location: " + location.get("location") + " - " + location.get("room_count") + " rooms");
                }
            }
            
            if (locations.isEmpty()) {
                System.out.println("No locations found");
                return "Hi·ªán t·∫°i ch∆∞a c√≥ th√¥ng tin ƒë·ªãa ƒëi·ªÉm. Vui l√≤ng th·ª≠ l·∫°i sau!";
            }
            
            StringBuilder response = new StringBuilder();
            response.append("üìç **C√°c ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn:**\n\n");
            
            for (int i = 0; i < locations.size(); i++) {
                Map<String, Object> location = locations.get(i);
                response.append(String.format("**%d. %s** - %d ph√≤ng\n", 
                    i + 1, location.get("location"), location.get("room_count")));
            }
            
            response.append("\nüí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ ch·ªçn ƒë·ªãa ƒëi·ªÉm ph√π h·ª£p ƒë·ªÉ t√¨m ph√≤ng g·∫ßn ƒë√≥!");
            
            System.out.println("Location response: " + response.toString());
            return response.toString();
            
        } catch (SQLException e) {
            System.err.println("=== SQL ERROR in getLocationInformation ===");
            System.err.println("Error message: " + e.getMessage());
            System.err.println("Error code: " + e.getErrorCode());
            System.err.println("SQL state: " + e.getSQLState());
            e.printStackTrace();
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin ƒë·ªãa ƒëi·ªÉm. Vui l√≤ng th·ª≠ l·∫°i sau!";
        } catch (Exception e) {
            System.err.println("=== GENERAL ERROR in getLocationInformation ===");
            System.err.println("Error message: " + e.getMessage());
            e.printStackTrace();
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin ƒë·ªãa ƒëi·ªÉm. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }
    
    private String getAmenitiesInformation(String userMessage) {
        try (Connection conn = DBConnection.getConnection()) {
            String sql = "SELECT amenities, COUNT(*) as count " +
                        "FROM listings WHERE status = 'active' AND amenities IS NOT NULL " +
                        "GROUP BY amenities ORDER BY count DESC LIMIT 10";
            
            List<Map<String, Object>> amenities = new ArrayList<>();
            
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                
                while (rs.next()) {
                    Map<String, Object> amenity = new HashMap<>();
                    amenity.put("amenities", rs.getString("amenities"));
                    amenity.put("count", rs.getInt("count"));
                    amenities.add(amenity);
                }
            }
            
            if (amenities.isEmpty()) {
                return "Hi·ªán t·∫°i ch∆∞a c√≥ th√¥ng tin ti·ªán √≠ch. Vui l√≤ng th·ª≠ l·∫°i sau!";
            }
            
            StringBuilder response = new StringBuilder();
            response.append("üè† **Ti·ªán √≠ch ph·ªï bi·∫øn:**\n\n");
            
            for (int i = 0; i < amenities.size(); i++) {
                Map<String, Object> amenity = amenities.get(i);
                response.append(String.format("**%d. %s** - %d ph√≤ng c√≥ ti·ªán √≠ch n√†y\n", 
                    i + 1, amenity.get("amenities"), amenity.get("count")));
            }
            
            response.append("\nüí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ t√¨m ph√≤ng c√≥ ti·ªán √≠ch mong mu·ªën ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t!");
            
            return response.toString();
            
        } catch (SQLException e) {
            e.printStackTrace();
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin ti·ªán √≠ch. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }
    
    private String getBookingInformation(String userMessage) {
        return "üìÖ **H∆∞·ªõng d·∫´n ƒë·∫∑t ph√≤ng:**\n\n" +
               "1Ô∏è‚É£ **Ch·ªçn ph√≤ng:** T√¨m ph√≤ng ph√π h·ª£p v·ªõi nhu c·∫ßu\n" +
               "2Ô∏è‚É£ **Ki·ªÉm tra l·ªãch:** Xem l·ªãch tr·ªëng c·ªßa ph√≤ng\n" +
               "3Ô∏è‚É£ **ƒê·∫∑t ph√≤ng:** Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch·ªß nh√†\n" +
               "4Ô∏è‚É£ **Thanh to√°n:** Th·ªèa thu·∫≠n ph∆∞∆°ng th·ª©c thanh to√°n\n" +
               "5Ô∏è‚É£ **X√°c nh·∫≠n:** Nh·∫≠n x√°c nh·∫≠n ƒë·∫∑t ph√≤ng\n\n" +
               "üí° **L∆∞u √Ω:** Lu√¥n li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch·ªß nh√† ƒë·ªÉ ƒë·∫∑t ph√≤ng an to√†n!";
    }
    
    private String getGeneralRecommendations(String userMessage) {
        return "üëã **Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**\n\n" +
               "üè† **T√¨m ph√≤ng:**\n" +
               "‚Ä¢ 't√¥i mu·ªën t√¨m ph√≤ng' - T√¨m ph√≤ng t·ªët nh·∫•t\n" +
               "‚Ä¢ 't√¨m ph√≤ng gi√° r·∫ª' - Ph√≤ng gi√° t·ªët\n" +
               "‚Ä¢ 'ph√≤ng c√≥ ti·ªán √≠ch g√¨' - Ti·ªán √≠ch ph√≤ng\n" +
               "‚Ä¢ 'ph√≤ng g·∫ßn trung t√¢m' - T√¨m ph√≤ng theo v·ªã tr√≠\n" +
               "‚Ä¢ 't√¥i c·∫ßn t∆∞ v·∫•n ph√≤ng' - T∆∞ v·∫•n chuy√™n nghi·ªáp\n\n" +
               "üí∞ **Th√¥ng tin gi√°:**\n" +
               "‚Ä¢ 'gi√° ph√≤ng nh∆∞ th·∫ø n√†o' - Th√¥ng tin gi√°\n" +
               "‚Ä¢ 'so s√°nh gi√° ph√≤ng' - So s√°nh gi√° c·∫£\n" +
               "‚Ä¢ 'ph√≤ng gi√° bao nhi√™u' - H·ªèi v·ªÅ gi√°\n\n" +
               "üìç **ƒê·ªãa ƒëi·ªÉm:**\n" +
               "‚Ä¢ 'ph√≤ng ·ªü ƒë√¢u' - ƒê·ªãa ƒëi·ªÉm ph·ªï bi·∫øn\n" +
               "‚Ä¢ 'ƒë·ªãa ƒëi·ªÉm n√†o c√≥ nhi·ªÅu ph√≤ng' - Khu v·ª±c c√≥ nhi·ªÅu ph√≤ng\n" +
               "‚Ä¢ 'ph√≤ng ·ªü qu·∫≠n n√†o' - T√¨m theo qu·∫≠n\n\n" +
               "üè† **Ti·ªán √≠ch:**\n" +
               "‚Ä¢ 'ti·ªán √≠ch ph√≤ng' - Ti·ªán √≠ch c√≥ s·∫µn\n" +
               "‚Ä¢ 'ph√≤ng c√≥ wifi kh√¥ng' - H·ªèi v·ªÅ wifi\n" +
               "‚Ä¢ 'ph√≤ng c√≥ ƒëi·ªÅu h√≤a kh√¥ng' - H·ªèi v·ªÅ ƒëi·ªÅu h√≤a\n\n" +
               "üìÖ **ƒê·∫∑t ph√≤ng:**\n" +
               "‚Ä¢ 'l√†m sao ƒë·∫∑t ph√≤ng' - H∆∞·ªõng d·∫´n ƒë·∫∑t ph√≤ng\n" +
               "‚Ä¢ 'c√°ch ƒë·∫∑t ph√≤ng' - Quy tr√¨nh ƒë·∫∑t ph√≤ng\n" +
               "‚Ä¢ 'ƒë·∫∑t ph√≤ng nh∆∞ th·∫ø n√†o' - H∆∞·ªõng d·∫´n chi ti·∫øt\n\n" +
               "üîß **Test & H·ªó tr·ª£:**\n" +
               "‚Ä¢ 'test' - Ki·ªÉm tra database\n" +
               "‚Ä¢ 'simple' - Test ƒë∆°n gi·∫£n\n" +
               "‚Ä¢ 'ki·ªÉm tra' - Test h·ªá th·ªëng\n\n" +
               "üí° **G·ª£i √Ω:** H√£y h·ªèi c·ª• th·ªÉ v·ªÅ nhu c·∫ßu c·ªßa b·∫°n ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët nh·∫•t!";
    }
    
    // Test method for database
    private String testDatabaseQuery() {
        try (Connection conn = DBConnection.getConnection()) {
            System.out.println("=== TESTING DATABASE ===");
            
            // Test 1: Count total listings
            String sql1 = "SELECT COUNT(*) as total FROM listings";
            try (PreparedStatement stmt = conn.prepareStatement(sql1);
                 ResultSet rs = stmt.executeQuery()) {
                
                if (rs.next()) {
                    int total = rs.getInt("total");
                    System.out.println("Total listings: " + total);
                    
                    if (total == 0) {
                        return "‚ùå **Database Test:** Kh√¥ng c√≥ d·ªØ li·ªáu trong b·∫£ng listings";
                    }
                }
            }
            
            // Test 2: Get first listing
            String sql2 = "SELECT TOP 1 ListingID, Title, PricePerNight FROM listings";
            try (PreparedStatement stmt = conn.prepareStatement(sql2);
                 ResultSet rs = stmt.executeQuery()) {
                
                if (rs.next()) {
                    int id = rs.getInt("ListingID");
                    String title = rs.getString("Title");
                    double price = rs.getDouble("PricePerNight");
                    
                    System.out.println("First listing: " + title + " - " + price);
                    return String.format("‚úÖ **Database Test:** T√¨m th·∫•y ph√≤ng ƒë·∫ßu ti√™n - ID: %d, T√™n: %s, Gi√°: %.0f VNƒê", 
                                       id, title, price);
                }
            }
            
            return "‚ùå **Database Test:** Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu";
            
        } catch (SQLException e) {
            System.err.println("Database test failed: " + e.getMessage());
            return "‚ùå **Database Test:** L·ªói - " + e.getMessage();
        } catch (Exception e) {
            System.err.println("General test error: " + e.getMessage());
            return "‚ùå **Database Test:** L·ªói chung - " + e.getMessage();
        }
    }
    
    // Simple test method
    private String getSimpleTest() {
        try (Connection conn = DBConnection.getConnection()) {
            System.out.println("=== SIMPLE TEST ===");
            
            String sql = "SELECT TOP 1 * FROM listings";
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                
                if (rs.next()) {
                    return "‚úÖ **Test th√†nh c√¥ng:** K·∫øt n·ªëi database OK, c√≥ d·ªØ li·ªáu trong b·∫£ng listings";
                } else {
                    return "‚ö†Ô∏è **Test th√†nh c√¥ng:** K·∫øt n·ªëi database OK, nh∆∞ng b·∫£ng listings tr·ªëng";
                }
            }
            
        } catch (SQLException e) {
            System.err.println("Simple test failed: " + e.getMessage());
            return "‚ùå **Test th·∫•t b·∫°i:** L·ªói SQL - " + e.getMessage();
        } catch (Exception e) {
            System.err.println("Simple test error: " + e.getMessage());
            return "‚ùå **Test th·∫•t b·∫°i:** L·ªói chung - " + e.getMessage();
        }
    }
}
