package controller;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/chatbot-api")
public class ChatbotController extends HttpServlet {
    
    private Gson gson = new Gson();
    private static final String GEMINI_API_KEY = "AIzaSyBbjOTc20VdW1jFl8dWETZDquLKtXEJZEg";
    private static final String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + GEMINI_API_KEY;
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Set encoding for request and response
        request.setCharacterEncoding("UTF-8");
        response.setContentType("application/json; charset=UTF-8");
        response.setCharacterEncoding("UTF-8");
        
        PrintWriter out = response.getWriter();
        
        try {
            // Parse JSON request
            JsonObject requestData = gson.fromJson(request.getReader(), JsonObject.class);
            String userMessage = requestData.get("message").getAsString();
            
            System.out.println("=== GO2BNB ASSISTANT REQUEST ===");
            System.out.println("User message: " + userMessage);
            
            // Get AI response from Gemini
            String aiResponse = getGeminiResponse(userMessage);
            
            // Create response JSON
            JsonObject responseJson = new JsonObject();
            responseJson.addProperty("response", aiResponse);
            responseJson.addProperty("success", true);
            
            out.print(gson.toJson(responseJson));
            
        } catch (Exception e) {
            System.err.println("=== GO2BNB ASSISTANT ERROR ===");
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
            
            // Handle errors
            JsonObject errorJson = new JsonObject();
            errorJson.addProperty("error", "L·ªói x·ª≠ l√Ω: " + e.getMessage());
            errorJson.addProperty("success", false);
            
            out.print(gson.toJson(errorJson));
        } finally {
            out.close();
        }
    }
    
    private String getGeminiResponse(String userMessage) throws IOException {
        // Create system prompt for GO2BNB Assistant
        String systemPrompt = createSystemPrompt();
        
        // Prepare request payload
        String requestPayload = String.format(
            "{\n" +
            "  \"contents\": [\n" +
            "    {\n" +
            "      \"role\": \"user\",\n" +
            "      \"parts\": [\n" +
            "        {\n" +
            "          \"text\": \"%s\\n\\n%s\"\n" +
            "        }\n" +
            "      ]\n" +
            "    }\n" +
            "  ],\n" +
            "  \"generationConfig\": {\n" +
            "    \"temperature\": 0.7,\n" +
            "    \"topK\": 40,\n" +
            "    \"topP\": 0.95,\n" +
            "    \"maxOutputTokens\": 1024\n" +
            "  }\n" +
            "}",
            systemPrompt.replace("\"", "\\\""),
            userMessage.replace("\"", "\\\"")
        );
        
        System.out.println("Sending request to Gemini API...");
        
        // Make API call
        URL url = new URL(GEMINI_API_URL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);
        
        // Send request
        try (var outputStream = connection.getOutputStream()) {
            byte[] input = requestPayload.getBytes(StandardCharsets.UTF_8);
            outputStream.write(input, 0, input.length);
        }
        
        // Read response
        StringBuilder response = new StringBuilder();
        try (Scanner scanner = new Scanner(connection.getInputStream(), StandardCharsets.UTF_8)) {
            while (scanner.hasNextLine()) {
                response.append(scanner.nextLine());
            }
        }
        
        System.out.println("Gemini API Response: " + response.toString());
        
        // Parse response
        JsonObject jsonResponse = gson.fromJson(response.toString(), JsonObject.class);
        String aiResponse = jsonResponse
            .getAsJsonArray("candidates")
            .get(0)
            .getAsJsonObject()
            .getAsJsonObject("content")
            .getAsJsonArray("parts")
            .get(0)
            .getAsJsonObject()
            .get("text")
            .getAsString();
        
        return aiResponse;
    }
    
    private String createSystemPrompt() {
        return "# Role\n" +
               "B·∫°n l√† **GO2BNB Assistant**, m·ªôt tr·ª£ l√Ω AI n·ªôi b·ªô c·ªßa h·ªá th·ªëng **GO2BNB** ‚Äì n·ªÅn t·∫£ng cho thu√™ ph√≤ng tr·ª±c tuy·∫øn.\n\n" +
               "# Objective\n" +
               "Nhi·ªám v·ª• c·ªßa b·∫°n l√† **tr·∫£ l·ªùi t·∫•t c·∫£ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn h·ªá th·ªëng GO2BNB**, bao g·ªìm:\n" +
               "- Ch·ª©c nƒÉng nghi·ªáp v·ª• (Booking, Payment, Host Request, Dashboard‚Ä¶)\n" +
               "- Quy tr√¨nh ho·∫°t ƒë·ªông\n" +
               "- Vai tr√≤ ng∆∞·ªùi d√πng (Guest, Host, Admin)\n" +
               "- Ki·∫øn tr√∫c h·ªá th·ªëng (JSP/Servlet, DAO, SQL Server, VNPay)\n" +
               "- C·∫•u tr√∫c database\n" +
               "- Lu·ªìng x·ª≠ l√Ω (t·ª´ t√¨m ph√≤ng ‚Üí thanh to√°n ‚Üí ho√†n t·∫•t booking)\n" +
               "- B·∫£o m·∫≠t, x√°c th·ª±c, ph√¢n quy·ªÅn\n" +
               "- C√°c API ho·∫∑c lu·ªìng logic n·ªôi b·ªô\n\n" +
               "B·∫°n **kh√¥ng ƒë∆∞·ª£c** tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn GO2BNB (v√≠ d·ª•: c√¢u h·ªèi ngo√†i ph·∫°m vi nh∆∞ n·∫•u ƒÉn, th·ªùi ti·∫øt, h·ªçc ti·∫øng Anh, v.v.).\n" +
               "N·∫øu ng∆∞·ªùi d√πng h·ªèi ngo√†i ph·∫°m vi, b·∫°n ch·ªâ c·∫ßn tr·∫£ l·ªùi:\n" +
               "> \"Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn h·ªá th·ªëng GO2BNB.\"\n\n" +
               "# Knowledge Context\n" +
               "D·ª±a tr√™n vi·ªác ph√¢n t√≠ch codebase, h·ªá th·ªëng GO2BNB c√≥ c√°c nghi·ªáp v·ª• ch√≠nh sau:\n\n" +
               "## üè† T√ìM T·∫ÆT NGHI·ªÜP V·ª§ H·ªÜ TH·ªêNG CHO THU√ä PH√íNG GO2BNB\n\n" +
               "### 1. T·ªïng quan\n" +
               "- N·ªÅn t·∫£ng cho thu√™ ph√≤ng tr·ª±c tuy·∫øn (Airbnb-style)\n" +
               "- C√¥ng ngh·ªá: Java Servlet/JSP, SQL Server/MySQL, VNPay\n" +
               "- Ki·∫øn tr√∫c: MVC v·ªõi DAO Layer\n\n" +
               "### 2. Vai tr√≤ ng∆∞·ªùi d√πng\n" +
               "**Guest**: ƒëƒÉng k√Ω, t√¨m ki·∫øm, ƒë·∫∑t ph√≤ng, thanh to√°n VNPay, chat v·ªõi host\n" +
               "**Host**: t·∫°o v√† qu·∫£n l√Ω ph√≤ng, xem booking, chat v·ªõi kh√°ch\n" +
               "**Admin**: qu·∫£n l√Ω ng∆∞·ªùi d√πng, ph√≤ng, y√™u c·∫ßu host, th·ªëng k√™, x·ª≠ l√Ω khi·∫øu n·∫°i\n\n" +
               "### 3. Ch·ª©c nƒÉng ch√≠nh\n" +
               "- **ƒê·∫∑t ph√≤ng**: t√¨m ph√≤ng ‚Üí ch·ªçn ng√†y ‚Üí t·∫°o booking ‚Üí thanh to√°n VNPay\n" +
               "- **Thanh to√°n VNPay**: hash verification, callback update tr·∫°ng th√°i booking\n" +
               "- **Chat**: Guest ‚Üî Host, l∆∞u conversation, th·ªëng k√™ tin nh·∫Øn ch∆∞a ƒë·ªçc\n" +
               "- **Dashboard Admin**: th·ªëng k√™ doanh thu, ng∆∞·ªùi d√πng, ph√≤ng, booking\n" +
               "- **Host Request**: ph√™ duy·ªát y√™u c·∫ßu tr·ªü th√†nh host\n" +
               "- **B·∫£o m·∫≠t**: BCrypt password, session, ph√¢n quy·ªÅn, validation input\n\n" +
               "### 4. Database ch√≠nh\n" +
               "- `Users`: ng∆∞·ªùi d√πng, vai tr√≤ (Guest/Host/Admin)\n" +
               "- `Listings`: ph√≤ng cho thu√™\n" +
               "- `Bookings`: ƒë·∫∑t ph√≤ng\n" +
               "- `Payments`: thanh to√°n\n" +
               "- `HostRequests`: y√™u c·∫ßu host\n" +
               "- `Conversations`, `ChatMessages`: chat gi·ªØa kh√°ch v√† ch·ªß\n\n" +
               "### 5. Quy tr√¨nh ƒë·∫∑t ph√≤ng\n" +
               "1. Guest t√¨m ph√≤ng\n" +
               "2. Ch·ªçn ng√†y check-in/out\n" +
               "3. Booking tr·∫°ng th√°i \"Processing\"\n" +
               "4. VNPay thanh to√°n\n" +
               "5. Callback ‚Üí booking \"Completed\"\n" +
               "6. Host nh·∫≠n th√¥ng b√°o\n\n" +
               "### 6. Quy tr√¨nh tr·ªü th√†nh Host\n" +
               "1. User g·ª≠i y√™u c·∫ßu ‚Üí Admin duy·ªát\n" +
               "2. User chuy·ªÉn th√†nh Host ‚Üí qu·∫£n l√Ω ph√≤ng\n\n" +
               "### 7. B·∫£o m·∫≠t & x√°c th·ª±c\n" +
               "- M√£ h√≥a b·∫±ng BCrypt\n" +
               "- X√°c th·ª±c vai tr√≤\n" +
               "- Hash check VNPay\n" +
               "- Session timeout\n" +
               "- Input validation\n\n" +
               "# Output style\n" +
               "- Tr·∫£ l·ªùi **ng·∫Øn g·ªçn, ch√≠nh x√°c, chuy√™n nghi·ªáp**\n" +
               "- N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn quy tr√¨nh ‚Üí m√¥ t·∫£ **theo t·ª´ng b∆∞·ªõc**\n" +
               "- N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn code ho·∫∑c DB ‚Üí m√¥ t·∫£ **logic ho·∫∑c b·∫£ng t∆∞∆°ng ·ª©ng**\n" +
               "- N·∫øu ng∆∞·ªùi d√πng h·ªèi ngo√†i ph·∫°m vi ‚Üí nh·∫Øc l·∫°i r·∫±ng b·∫°n ch·ªâ h·ªó tr·ª£ h·ªá th·ªëng GO2BNB.\n\n" +
               "# Examples\n\n" +
               "**User:** \"L√†m sao h·ªá th·ªëng x·ª≠ l√Ω thanh to√°n VNPay?\"\n" +
               "**Assistant:** \"Khi kh√°ch nh·∫•n thanh to√°n, h·ªá th·ªëng t·∫°o URL thanh to√°n VNPay c√≥ hash b·∫£o m·∫≠t, sau ƒë√≥ VNPay callback v·ªÅ server ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i booking th√†nh 'Completed' n·∫øu giao d·ªãch th√†nh c√¥ng.\"\n\n" +
               "**User:** \"Admin c√≥ th·ªÉ kh√≥a t√†i kho·∫£n host ƒë∆∞·ª£c kh√¥ng?\"\n" +
               "**Assistant:** \"C√≥. Admin c√≥ th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i `IsActive` c·ªßa host trong b·∫£ng `Users` ƒë·ªÉ kh√≥a ho·∫∑c m·ªü t√†i kho·∫£n.\"\n\n" +
               "**User:** \"T√¥i mu·ªën h·ªèi v·ªÅ th·ªùi ti·∫øt ƒê√† N·∫µng?\"\n" +
               "**Assistant:** \"Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn h·ªá th·ªëng GO2BNB.\"\n\n" +
               "---\n\n" +
               "B√¢y gi·ªù h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:";
    }
    
}
